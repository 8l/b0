// standard routines.

// Copyright 2005 Darran Kartaschew
// Released under a BSD Licence.

// Contains the following routine:

// atoi();  	UTF16 int -> int
// itoa();  	int -> UTF16 int
// htoi();  	UTF16 Hex -> int
// itoh();	  	int -> UTF16 hex
// atof();		UTF16 -> float
// ftoa();		float -> UTF16
// memcmp();
// memcpy();
// Hash();		UTF16 -> hash;

//*****************************
//
// atoi()
//
// takes a UTF16 encoded string (integer) and returns an integer in r0
//
//*****************************

 proc atoi(source_ptr){

	push r1, r2, r3, r5;
	r5 = source_ptr;
	
	r0 = r0 ^ r0; 			// r0 = 0 - Our running value
	r1 = r1 ^ r1;			// r1 = 0 - Our input
	r2 = r2 ^ r2;			// r2 = 0 - Number of characters to check
	
	r2w = [r5+2];			// Number of characters in the string;
	r5 = r5 + 4;

	while (r2){
		r1w = [r5];			// Get our first character
		r1 = r1 - 30h;		// Convert to digit

		r3 = 9h;
		if (r1 > r3){
			pop r5, r3, r2, r1;
			return(0);
		}
		asm {
			lea r0, [r0 + r0 * 4]    // Mul by 5
			shl r0, 1				// Mul by 2
		} // Multiply by 10;
		r0 = r0 + r1;		// Add our digit
	}
	
	pop r5, r3, r2, r1;
	return(r0);
}

//*****************************
//
// itoa()
//
// takes an integer and inserts it into the string provided
//
//*****************************
proc itoa(value, dest_ptr){
	push r1, r2, r3, r4, r5;
	r5 = dest_ptr;
	
	r0 = value; 			// r0 = 0 - Our running value
	r1 = 10;				// r1 = 10 - Our divisor, r3 = remainder.
	r2 = r2 ^ r2;			// r2 = 0 - Number of characters in buffer
	r4 = r4 ^ r4;			// r4 = 0 - Number of characters written to buffer
	
	r2w = [r5];				// Number of characters in the string;
	r5 = r5 + 4;			// Point to start of string
	
	itoa_puti2(r0);
	
	r5 = dest_ptr;
	[r5+2] = r4w;			// Insert the string count
	
	pop r5, r4, r3, r2, r1;
}

proc itoa_puti2(value){
	r3 = r3 ^ r3;		// r3 = 0;
	r0 = r0 / r1;		// r0 = quotient, r3 = remainder.
	r3 = r3 + 30h;		// r3 -> ASCII/UTF16
	if (r0){
		push r3;
		itoa_puti2(r0);
		pop r3;
	}
	[r5] = r3w;
	r5 = r5 + 2;
	r4 = r4 + 1;
}

//*****************************
//
// htoi()
//
// takes a UTF16 encoded string (hexadecimal) and returns an integer in r0
//
//*****************************
proc htoi(source_ptr){
	push r1, r2, r3, r5;
	r5 = source_ptr;
	
	r0 = r0 ^ r0; 			// r0 = 0 - Our running value
	r1 = r1 ^ r1;			// r1 = 0 - Our input
	r2 = r2 ^ r2;			// r2 = 0 - Number of characters to check
	
	r2w = [r5+2];			// Number of characters in the string;
	r5 = r5 + 4;

	while (r2){
		r1w = [r5];			// Get our first character
		r1 = r1 - 30h;		// Convert to digit

		r3 = 9h;
		if (r1 > r3){
			r1 = r1 - 31h;
			r3 = 6h;
			if (r1 >= r3){
				pop r5, r3, r2, r1;
				return(0);
			}
			r1 = r1 + 10;
		}
		r0 = r0 << 4;		// Multiply by 16;
		r0 = r0 + r1;		// Add our digit
		r5 = r5 + 2;		// Increment our pointer
		r2 = r2 - 1;		// decrement our count
	}
	
	pop r5, r3, r2, r1;
	return(r0);
}

//*****************************
//
// itoh()
//
// takes an integer and returns a UTF16 encoded string (hexadecimal)
//
//*****************************
proc itoh(value, dest_ptr){
	push r1, r2, r3, r4, r5;
	r5 = dest_ptr;
	r0 = value;

	r3 = r3 ^ r3;			// r3 = 0 - Number of characters in string
	r2 = 64;				// Shift amount
	r4 = 57h;
	r5 = r5 + 4;

	while (r2){
		r2 = r2 - 4;		// Shift amount
		r1 = r0 >> r2;
		r1 = r1 && 0fh;		// The next nibble
		r15 = 30h;
		asm {
			cmp r1, 09h
			cmova r15, r4	// If our value is above 9, set a new increment amount
		}
		r1 = r1 + r15;
		[r5] = r1w;			// Store our value;
		r5 = r5 + 2;		// Increment our pointer
		r3 = r3 + 1;		// Increment our count
	}
	r5 = dest_ptr;
	[r5+2] = r3w;			// Store count;
	pop r5, r4, r3, r2, r1;
	return(r0);
}

//*****************************
//
// memcpy()
//
// copys a memory block from 1 location to another.
//
//*****************************
proc memcpy(source_ptr, dest_ptr, size){
	push r2, r4, r5;
	r4 = dest_ptr;
	r5 = source_ptr;
	r2 = size;
	asm {
		cld
		rep movsb
	}
	pop r5, r4, r2;
	return(r0);
}

//*****************************
//
// memcmp()
//
// compares a memory block from 1 location to another.
// returns non-zero if different.
//
//*****************************
proc memcmp(source_ptr, dest_ptr, size){
	push r2, r4, r5;
	r4 = dest_ptr;
	r5 = source_ptr;
	r2 = size;
	asm {
		cld
		repe cmpsb
	}
	r0 = r2;
	pop r5, r4, r2;
	return(r0);      // if r0 = 0, then strings equal.
}

//*****************************
//
// Hash()
//
// takes a UTF16 encoded string, and returns a 64bit hash;
//
//*****************************

// This is function is based on ElfHash.

///*--- ElfHash ---------------------------------------------------
// *  The published hash algorithm used in the UNIX ELF format
// *  for object files. Accepts a pointer to a string to be hashed
// *  and returns an unsigned long.
// *-------------------------------------------------------------*/
//unsigned long ElfHash ( const unsigned char *name ){
//    unsigned long   h = 0, g;
//    while ( *name )
//    {
//        h = ( h << 4 ) + *name++;
//        if ( g = h & 0xF0000000 )
//            h ^= g >> 24;
//        h &= ~g;
//    }
//    return h;
//}

proc Hash(source_ptr){
	push r1, r2, r3, r5;
	r5 = source_ptr;
	r0 = r0 ^ r0;			// r0 = 0 - our character
	r1 = r1 ^ r1;			// r1 = 0 = h.
	r2 = r2 ^ r2;			// r2 = 0
	r3 = r3 ^ r3;			// r3 = 0 = g.
	r2w = [r5+2];			// r2 = length of string;
	r5 = r5 + 4;			// Goto to start of string
	while (r2){
		r0w = [r5];
		r5 = r5 + 1;
		r1 = r1 << 4;
		r1 = r1 + r0;		// h = ( h << 4 ) + *name++;
		r3 = r1 && 0F000000h;
		if (r3){			// if ( g = h & 0xF0000000 )
			push r3;
			r3 = r3 >> 24;
			r1 = r1 ^ r3;
			pop r3;			// 		h ^= g >> 24;
		}
		!r3;
		r1 = r1 && r3;		// h &= ~g;
		r2 = r2 - 1;
	}
	r0 = r1;
	pop r5, r3, r2, r1;
	return(r0);
}
