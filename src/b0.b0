// B0
//
// Copyright (C) 2000-2008, Darran Kartaschew.
// All rights reserved.
// 
// Licence
// -------
// 
// Copyright (C) 2000-2008, Darran Kartaschew.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, are permitted
// provided that the following conditions are met:
// 
// *  Redistributions of source code must retain the above copyright notice, this list of conditions
//    and the following disclaimer. 
// 
// *  Redistributions in binary form must reproduce the above copyright notice, this list of 
//    conditions and the following disclaimer in the documentation and/or other materials provided
//    with the distribution. 
// 
// *  Neither the name of 'B0' nor the names of its contributors may be used to endorse or promote 
//    products derived from this software without specific prior written permission. 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR 
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
// IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
// OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 

// Uncomment to build i386 version of the compiler, else default to AMD64 version.
// #define i386

// Note: the resulting compiler is still requires a 64bit system, however the compiler will
// output 32bit code instead of 64bit code. Basically you're building a cross-compiler.

//// Uncomment to build the appropriate version, else defaults to UNIX_LIBC
// #define LINUX;				// Native Linux Version
// #define FREEBSD;				// Native FreeBSD Version
// #define WIN64;				// Native Windows x64 Version
// #define SOLARIS;				// Native Sun Solaris 11 x64 Version
// #define UNIX_LIBC;			// Compiler linked to libc to generate executable
// #define FREEBSD_LIBC;		// Are we building using libc or as *.o on FreeBSD?

// #define SYSV_ELFO;			// Compiler built as generic *.o file
// #define WIN_DLL;				// Compiler build as Windows x64 DLL

//#ifdef WIN_DLL;
//	#COMPILER_OPTION DLL 'b0.dll';
//	#COMPILER_OPTION RSRC 'src\\rsrc\\b0.res';
//#endif;
//
//#ifdef WIN64;
//	#COMPILER_OPTION RSRC 'src\\rsrc\\b0.res';
//#endif;



#COMPILER_OPTION UTF8;


lib 'b0.inc';	// Auto generated by build script for build options

lib 'std_char.b0';
lib 'b0.h.b0';
lib 'b0_variables.b0';

m64 argc;						// We define these here rather than as a local variable
m64 argv;						// to allow us to access them without setting up a 
								// local variable frame;
m64 argp;						// Environment pointer;

#ifndef i386;
	#define CPU_STACK_SIZE = 8;
	#define CPU_STACK_SIZE_SHIFT = 3;
	#define TYPE_MAX_REG = TYPE_M64;
#else;
	#define CPU_STACK_SIZE = 4;
	#define CPU_STACK_SIZE_SHIFT = 2;
	#define TYPE_MAX_REG = TYPE_M32;
#endif;

#ifdef WIN64;
	#define PATH_SEPARATOR = CHAR_SCOLON;  // ;
#else;
	#define PATH_SEPARATOR = CHAR_COLON;   // :
#endif;


#ifdef WIN64;
	lib 'b0_win64.b0';
#endif;

#ifdef UNIX_LIBC;
	lib 'b0_libc.b0';
#endif;

#ifdef LINUX;
	lib 'b0_linux.b0';
#endif;

#ifdef SYSV_ELFO;
	lib 'b0_libc.b0';
	lib 'b0_sysv.b0';
#endif;

#ifdef WIN_DLL;
	lib 'b0_win64.b0';
	lib 'b0_dll.b0';
#endif;

#ifdef FREEBSD;
	lib 'b0_freebsd.b0';
#endif;

#ifdef SOLARIS;
	#define UNIX_LIBC;
	lib 'b0_libc.b0';
#endif;

#ifndef WIN64;
#ifndef UNIX_LIBC;
#ifndef LINUX;
#ifndef FREEBSD;
#ifndef SOLARIS;
#ifndef SYSV_ELFO;
#ifndef WIN_DLL;
	#define UNIX_LIBC;
	lib 'b0_libc.b0';
#endif;
#endif;
#endif;
#endif;
#endif;
#endif;
#endif;


// We include this here so it can directly access all defined variables and definitions.
lib 'b0_stdlib.b0';
lib 'b0_preprocess.b0';
lib 'core.b0';

#ifndef SYSV_ELFO;
#ifndef WIN_DLL;

proc main(){

	#ifdef LINUX;
	r4 = [r7+8];
	r5 = &[r7+16];
	r3 = &[r7+r4*8+24];

	argc = r4;					// On application initialisation argc = [r7+8]
	argv = r5;					// and argv = &[r7+16]
	argp = r3;					// argp = &[r7+r4*8+24];
	r6 = memInit();
	#endif;
	
	#ifdef FREEBSD;			

	argc = r4;					// On application initialisation argc = [r7+8]
	argv = r5;					// and argv = &[r7+16]
	argp = r3;					// argp = &[r7+r4*8+24];
	r6 = memInit();
	#endif;
	
	#ifdef UNIX_LIBC;			// I must assume that all other UNIX systems
	argc = r4;					// are using the SYS V 64bit ABI for x86-64.
	argv = r5;
	r6 = memInit();
	__Init_libc();				// Set our default file handles so that we
								// can talk to libc!
	#endif;

	#ifdef WIN64;				// 
	__Init_Win64();				// Set our default file handles so that we
								// can talk to Windows console!
	SetArgCV();
	argc = r4;					// 
	argv = r5;					// 
	argp = 0;					// 
								
	#endif;						// No need to call memInit() on Win64 as this 
								// Setup for us automatically.
	b0_main();
	
	#ifdef WIN64;
	__Exit_Win64();
	#endif;
	
	exit(r0);
}

#endif;
#endif;

