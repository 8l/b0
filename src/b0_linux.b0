// Linux OS-specific system calls go here.

#define LOCAL_HEAP = 100000h;			// Allocate 1MB for local thread heap;

#define STDIN  = 00h;
#define STDOUT = 01h;
#define STDERR = 02h;

#define CLOCKS_PER_SEC = 1000000;  //POSIX value

proc _fgetc(handle) {
	m64 buffer;
	push r1, r2, r3, r4, r5, r8, r9, r10, r11, r12, r13, r14, r15;
	r0 = 03;		// Sys_read
	r1 = handle;
	r2 = &buffer;
	r3 = 1;			// 1 byte;
	syscall;
	if(r0){
		r2 = &buffer;
		r0b = [r2];
	} else {
		r0 = EOF;
	}
	pop r15, r14, r13, r12, r11, r10, r9, r8, r5, r4, r3, r2, r1;
	return(r0);
};

proc _fclose(handle) {
	push r1, r2, r3, r4, r5, r8, r9, r10, r11, r12, r13, r14, r15;
	r0 = 06;		// sys_close;
	r1 = handle;
	syscall;
	pop r15, r14, r13, r12, r11, r10, r9, r8, r5, r4, r3, r2, r1;
	return(r0);
};

proc _remove(string) {
	push r1, r2, r3, r4, r5, r8, r9, r10, r11, r12, r13, r14, r15;
	r0 = 10;
	r1 = string;
	r1 = r1 + 2;
	syscall;
	pop r15, r14, r13, r12, r11, r10, r9, r8, r5, r4, r3, r2, r1;
	return(r0);
};

proc _clock() {
	m64[8] time;
	push r1, r2, r3, r4, r5, r8, r9, r10, r11, r12, r13, r14, r15;
	r0 = 13;
	r1 = &time;
	syscall;
	r1 = &time;
	r0 = r0 ^ r0;
	r0w = [r1];
	pop r15, r14, r13, r12, r11, r10, r9, r8, r5, r4, r3, r2, r1;
	return(r0);
};

proc _fopen(file2open, acl) {
	push r1, r2, r3, r4, r5, r8, r9, r10, r11, r12, r13, r14, r15;
	r0 = 05;
	r1 = file2open;
	r1 = r1 + 2;
	r2 = acl;		//1102o = create/trunc   // 0000 = readonly
	r3 = 0;
	r3b = [r2+2];
	r2 = CHAR_w;
	if(r3 == r2){
		r2 = 242h;
	} else {
		r2 = 0000h;
	}
	//echo_character(STDOUT, r3);
	r3 = 420;  //  -rw-r--r-- file permission.
	syscall;
	r1 = 0;
	if (r0 ~< r1){
		r0 = 0;
	}
	pop r15, r14, r13, r12, r11, r10, r9, r8, r5, r4, r3, r2, r1;
	return(r0);
};

proc _calloc(record_size, num_records) {
	push r1, r2, r3, r4, r5, r8, r9, r10, r11, r12, r13, r14, r15;
	r3 = 0;
	r1 = num_records;
	r0 = record_size;
	r2 = r0 * r1;
	r14 = r2;
	
	r1 = 0000h;			// Get top of memory
	r0 = 045;			// sys_brk
	syscall;
	r15 = r0;
	r1 = r0 + r2; 		// allocate memory (move top of memory).
	r0 = 045;
	syscall;			// set new top of bss
	
	// r15 = our new pointer;
	// r14 = our count in bytes;
	r0 = 0;
	r1 = 0;
	while (r0 < r14){
		[r15+r0] = r1;
		r0 = r0 + 8;
	}
	//Done clearing the memory block!
	r0 = r15;
	
	pop r15, r14, r13, r12, r11, r10, r9, r8, r5, r4, r3, r2, r1;
	return(r0);
};

proc _munmap(ptr, size){
	push r1, r2, r3, r4, r5, r8, r9, r10, r11, r12, r13, r14, r15; 
	r1 = ptr;
	r2 = size;
	r0 = 73;			// sys_munmap
	syscall;
	pop r15, r14, r13, r12, r11, r10, r9, r8, r5, r4, r3, r2, r1;
	return(r0);
};

proc _ftell(handle) {
	push r1, r2, r3, r4, r5, r8, r9, r10, r11, r12, r13, r14, r15;
	r0 = 19;		// sys_lseek;
	r1 = handle;
	r2 = 0;			// don't change the offset
	r3 = 1;			// seek from current position.
	syscall;
	pop r15, r14, r13, r12, r11, r10, r9, r8, r5, r4, r3, r2, r1;
	return(r0);
};

proc _getenv(string) {
	push r1, r2, r3, r4, r5, r8, r9, r10, r11, r12, r13, r14, r15;
	//r1 = &argp;
	asm {
	mov r1, _B0_argp
	}
	r1 = [r1];
	r10 = string;
	if(r1){
		r4 = 0;			// pointer to string;
		r5 = 0;			// zero result for strcmp;
		r2 = 0;  		// r2 = count
		r3 = [r1+r2*8];	// r3 = pointer to string;
		while (r3){
			r8 = _strcmp_env(r3, r10);
			if(r8 == r5){
				r4 = r3;	// we have a match;
			}
			r2 = r2 + 1;
			r3 = [r1+r2*8];
		}
		r0 = r4;
	} else {
		r0 = 0;
	}
	if(r0){
		// we have a string;
		r1 = CHAR_EQU;
		r2 = r2 ^ r2;
		r2b = [r0];
		while(r1 != r2){
			r0 = r0 + 1;
			r2b = [r0];
		}
		r0 = r0 + 1;
	}
	pop r15, r14, r13, r12, r11, r10, r9, r8, r5, r4, r3, r2, r1;
	return(r0);
};

proc _strcmp_env(src1, src2) { //rtns non-zero if different. src1 = ASCIIZ, src2 = b0.
	push r1, r2, r3, r4, r5;
	r4 = src1;
	r5 = src2;
	r5 = r5 + 2;
	r2 = 1;			// Our count;
	r0 = r0 ^ r0;
	r1 = r0;
	r3 = r0;
	r0b = [r4];
	r1b = [r5];
	while (r0 == r1){
		if (r0 == r3){
			// We have reached the end of the string;
			pop r5, r4, r3, r2, r1;
			return(0);
		}
		r4 = r4 + 1;
		r5 = r5 + 1;
		r2 = r2 + 1;
		r0b = [r4];
		r1b = [r5];
	}
	if(r1 == r3){
		r2 = 0;
	}
	r0 = r2;
	//r0 = r0 - 1;
	pop r5, r4, r3, r2, r1;
	return(r0);
};

proc _rewind(handle) {
	push r1, r2, r3, r4, r5, r8, r9, r10, r11, r12, r13, r14, r15;
	r0 = 19;		// sys_lseek;
	r1 = handle;
	r2 = 0;			// set to start of file
	r3 = 0;			// seek from start of file position.
	syscall;
	pop r15, r14, r13, r12, r11, r10, r9, r8, r5, r4, r3, r2, r1;
	return(r0);
};

proc sys_write(_handle, _ptr, _size){
	r0 = 4;						// sys_write
	r1 = _handle;				// file handle = stdout
	r2 = _ptr;					// pointer to string to print
	r2 = r2 + 2;				// Adjust for b0 string type;
	r3 = _size;					// String size
	syscall;
	return(r0);
}

proc _getpid(){
	push r1, r2, r3, r4, r5, r8, r9, r10, r11, r12, r13, r14, r15;
	r0 = 63;		// I need the syscall number;
	syscall;
	pop r15, r14, r13, r12, r11, r10, r9, r8, r5, r4, r3, r2, r1;
	return(r0);
}

proc _settmppath(){
	push r1, r2, r3, r4, r5, r8, r9, r10, r11, r12, r13, r14, r15;
	r0 = 0;
	r2 = &'/tmp/';
	//r3 = &tmp_directory;
	asm { 
		mov r3, _B0_tmp_directory;
	}
	strcpy(r3, r2);
	pop r15, r14, r13, r12, r11, r10, r9, r8, r5, r4, r3, r2, r1;
	return(r0);
}

proc echo_string(handle, string) {
	push r1, r2, r3, r4, r5, r8, r9, r10, r11, r12, r13, r14, r15;
	r1 = string;
	r3 = strlen(r1);
	r2 = handle;
	sys_write(r2, r1, r3);
	pop r15, r14, r13, r12, r11, r10, r9, r8, r5, r4, r3, r2, r1;
};

proc echo_integer(handle, integer) {
	push r1, r2, r3, r4, r5, r8, r9, r10, r11, r12, r13, r14, r15;
	m8[256] int_string;
	r0 = &int_string;
	r1 = integer;
	itoa(r0, r1);
	r0 = &int_string;
	r1 = handle;
	echo_string(r1, r0);	
	pop r15, r14, r13, r12, r11, r10, r9, r8, r5, r4, r3, r2, r1;
};

proc echo_character(handle, character) {
	m64 char_string;
	push r1, r2, r3, r4, r5, r8, r9, r10, r11, r12, r13, r14, r15;
	r0 = 0;
	r1 = &char_string;
	r2 = character;
	[r1] = r2;
	//[r1] = r2b;
	r1 = r1 - 2;
	r2 = handle;
	r3 = 1;
	sys_write(r2, r1, r3);
	pop r15, r14, r13, r12, r11, r10, r9, r8, r5, r4, r3, r2, r1;
};

proc echo_float(handle) {
	push r1, r2, r3, r4, r5, r8, r9, r10, r11, r12, r13, r14, r15;
	m8[256] fp0_string;
	r0 = &fp0_string;
	ftoa(r0);
	r0 = &fp0_string;
	r1 = handle;
	echo_string(r1, r0);	
	pop r15, r14, r13, r12, r11, r10, r9, r8, r5, r4, r3, r2, r1;
};	// only does fp0

proc echo_hex(handle, integer) {
	push r1, r2, r3, r4, r5, r8, r9, r10, r11, r12, r13, r14, r15;
	m8[256] hex_string;
	r0 = &hex_string;
	r1 = integer;
	itoah(r0, r1);
	r0 = &hex_string;
	r1 = handle;
	echo_string(r1, r0);	
	pop r15, r14, r13, r12, r11, r10, r9, r8, r5, r4, r3, r2, r1;
};

proc memInit(){
	push r4, r5;
	r2 = LOCAL_HEAP;	// Let's get our local heap size
	r1 = 0000h;			// Get top of memory
	r0 = 045;			// sys_brk
	syscall;
	r15 = r0;
	r1 = r0 + r2; 		// allocate memory (move top of memory).
	r0 = 045;
	syscall;			// set new top of bss
	pop r5, r4;
	return(r15);
}
